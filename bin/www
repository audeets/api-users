#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var https = require("https");
var http = require("http");
var fs = require("fs");

/**
 * Create HTTPS server.
 */
if (process.env.NODE_ENV !== "development") {
  var sslPort = normalizePort(process.env.PORT_HTTPS || "6443");
  https
    .createServer(
      {
        key: fs.readFileSync(process.env.SSL_KEY_PATH),
        cert: fs.readFileSync(process.env.SSL_CERT_PATH),
      },
      app
    )
    .listen(sslPort)
    .on("error", onError);
}

/**
 * Create HTTP server.
 */
var port = normalizePort(process.env.PORT_HTTP || "6080");
http.createServer(app).listen(port).on("error", onError);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind =
    typeof sslPort === "string" ? "Pipe " + sslPort : "Port " + sslPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
